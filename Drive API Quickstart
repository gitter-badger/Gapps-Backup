using System;

using Google.Apis.Auth.OAuth2;
using Google.Apis.Drive.v3;
using Google.Apis.Services;
using System.Security.Cryptography.X509Certificates;
using Google.Apis.Download;
using System.Collections.Generic;
using System.IO;


public class CreateService
{
    private const string SERVICE_ACCOUNT_EMAIL = "yourservername@yourservice.com";
    private const string SERVICE_ACCOUNT_PKCS12_FILE_PATH = @"yourkey.p12";

    /// <summary>
    /// Build a Drive service object authorized with the service account
    /// that acts on behalf of the given user.
    /// </summary>
    /// @param userEmail The email of the user.
    /// <returns>Drive service object.</returns>
    public static DriveService BuildService(String userEmail)
    {
        X509Certificate2 certificate = new X509Certificate2(SERVICE_ACCOUNT_PKCS12_FILE_PATH,
            "notasecret", X509KeyStorageFlags.Exportable);
        ServiceAccountCredential credential = new ServiceAccountCredential(
            new ServiceAccountCredential.Initializer(SERVICE_ACCOUNT_EMAIL)
            {
                Scopes = new[] { DriveService.Scope.Drive },
                User = userEmail
            }.FromCertificate(certificate));

        // Create the service.
        var service = new DriveService(new BaseClientService.Initializer()
        {
            HttpClientInitializer = credential,
            ApplicationName = "Drive API Service Account Sample",
        });

        return service;
    }
}

namespace DriveQuickstart
{
    class Program
    {
        // Google wanted me to define these.
        static string[] Scopes = { DriveService.Scope.DriveReadonly };
        static string ApplicationName = "Drive API .NET Quickstart";
        CreateService service = new CreateService();
        static void Main(string[] args)
        {
            // Take a peek inside our users file generated by UMRA.
            // enumerate through each gapp account and check for changed
            // or new files.
            string[] users = File.ReadAllLines(@"Z:\Downloads\gappusers.txt");
            if (users != null)
            {
                foreach (var names in users)
                {
                    Console.WriteLine("Selecting user: " + names.ToString());
                    
                    // Define parameters of request.
                    string user = names.ToString();
                    string savelocation = @"X:\PathHere\" + user + "\\";
                    string savedStartPageToken = "";
                    var start = CreateService.BuildService(user).Changes.GetStartPageToken().Execute();

                    // Check if directory exists, create if not.
                    FileInfo testdir = new FileInfo(savelocation);
                    Console.WriteLine("New directory created at: " + testdir);
                    testdir.Directory.Create();

                    // This token is set by Google, it defines changes made and
                    // increments the token value automatically. 
                    // The following reads the current token file (if it exists)
                    if (File.Exists(savelocation + ".currenttoken.tok"))
                    {
                        StreamReader curtokenfile = new StreamReader(savelocation + ".currenttoken.tok");
                        savedStartPageToken = curtokenfile.ReadLine().ToString();
                        curtokenfile.Close();
                        curtokenfile.Dispose();
                    }
                    else
                    {
                        // Token record didn't exist. Create a generic file, start at "1st" token
                        // In reality, I have no idea what token to start at, but 1 seems to be safe.
                        Console.Write("Creating new token file.\n");
                        StreamWriter sw = new StreamWriter(savelocation + ".currenttoken.tok");
                        sw.Write(1);
                        sw.Close();
                        sw.Dispose();
                        savedStartPageToken = "1";
                    }
                    Console.WriteLine("My previous token --->: " + savedStartPageToken);
                    Console.WriteLine("My brand new token --->: " + start.StartPageTokenValue);
                    Console.Write("Logging into Gapp domain as: " + user + "\nChecking for any existing files...\nPlease wait as this may take a while.\n");

                    string pageToken = savedStartPageToken;
                    if (pageToken == start.StartPageTokenValue)
                    {
                        Console.WriteLine("No file changes found for "+user+"\n");
                    }
                    else
                    {
                        // .current.tok is where we will place our records for changed files
                        Console.WriteLine("Changes detected. Making notes while we go through these.");

                        while (pageToken != null)
                        {
                            var request = CreateService.BuildService(user).Changes.List(pageToken);
                            StreamWriter deltalog = new StreamWriter(savelocation + ".current.tok");
                            request.Fields = "*";
                            request.Spaces = "drive";
                            var changes = request.Execute();
                            foreach (var change in changes.Changes)
                            {
                                try
                                {
                                    string updatedfile = CreateService.BuildService(user).Files.Get(change.FileId).Execute().Name;
                                    // Record the changed file
                                    Console.WriteLine(user+"New or changed file found: " + change.FileId + " --- " + updatedfile + "\n");
                                    deltalog.WriteLine(change.FileId + "," + updatedfile);
                                }
                                catch (Exception e)
                                {
                                    // Google seems to track every file ever created for the user
                                    // it also keeps a record of the fileId. Even if a user
                                    // deletes the file, it's still retained in Google's record
                                    // although the file is no longer available.
                                    // We'll throw an error to the user so the program will continue forth.
                                    Console.WriteLine(user+": File may no longer exist. Error ---> " + e.Message.ToString() + "\n");
                                }
                                if (changes.NewStartPageToken != null)
                                {
                                    // Last page, save this token for the next polling interval
                                    savedStartPageToken = changes.NewStartPageToken;
                                }
                                // Bring our token up to date for next run
                                pageToken = changes.NextPageToken;
                                File.WriteAllText(savelocation + ".currenttoken.tok", start.StartPageTokenValue);
                            }
                            deltalog.Close();
                        }


                        // Get all our files for the user. Max page size is 1k
                        // after that, we have to use Google's next page token
                        // to let us get more files.
                        FilesResource.ListRequest listRequest = CreateService.BuildService(user).Files.List();
                        listRequest.PageSize = 1000;
                        listRequest.Fields = "nextPageToken, files(id, name)";
                        string[] deltafiles = File.ReadAllLines(savelocation + ".current.tok");

                        IList<Google.Apis.Drive.v3.Data.File> files = listRequest.Execute()
                            .Files;

                        Console.WriteLine("\nFiles to backup:\n");
                        if (deltafiles != null)
                        {
                            foreach (var file in deltafiles)
                            {
                                try
                                {
                                    // Our file is a CSV. Column 1 = file ID, Column 2 = File name
                                    var values = file.Split(',');
                                    string fileId = values[0];
                                    string fileName = values[1];

                                    Console.WriteLine("ID: " + values[0] + " - Filename: " + values[1]);
                                    var requestfileid = CreateService.BuildService(user).Files.Get(fileId);
                                    var getfile = CreateService.BuildService(user).Files.Get(fileId).Execute();
                                    var request = CreateService.BuildService(user).Files.Export(fileId, getfile.MimeType);
                                    //Default extensions for files to .txt. This seems to be pretty safe.
                                    string ext = "*.txt*";

                                    // Things get sloppy here. The reason we're checking MimeTypes
                                    // is because we have to export the files from Google's format
                                    // to a format that is readable by a desktop computer program
                                    // So for example, the google-apps.spreadsheet will become an MS Excel file.
                                    if (getfile.MimeType == "application/vnd.google-apps.spreadsheet" || getfile.MimeType == "application/vnd.google-apps.ritz" || getfile.MimeType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                                    {
                                        request = CreateService.BuildService(user).Files.Export(fileId, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                                        ext = ".xls";
                                    }
                                    if (getfile.MimeType == "application/vnd.google-apps.document" || getfile.MimeType == "application/vnd.google-apps.kix")
                                    {
                                        request = CreateService.BuildService(user).Files.Export(fileId, "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
                                        ext = ".docx";
                                    }
                                    if (getfile.MimeType == "application/vnd.google-apps.presentation" || getfile.MimeType == "application/vnd.google-apps.punch")
                                    {
                                        request = CreateService.BuildService(user).Files.Export(fileId, "application/vnd.openxmlformats-officedocument.presentationml.presentation");
                                        ext = ".ppt";
                                    }

                                    // Google's folders are really just mime file types. Check for the file type
                                    // grab the name of the file, and create it as such on the server FS.
                                    if (getfile.MimeType == "application/vnd.google-apps.folder")
                                    {
                                        string dirname = (savelocation + fileName + "\\");
                                        FileInfo newdir = new FileInfo(dirname);
                                        newdir.Directory.Create();
                                        Console.WriteLine("Directory " + dirname + " was successfully created!\n");
                                    }
                                    else
                                    {
                                        // Again, things get a little sloppy. Let's find if these files match any of the types in our IF statement.
                                        if (getfile.MimeType == "image/gif" || getfile.MimeType == "image/jpeg" || getfile.MimeType == "image/png" || getfile.MimeType == "text/plain" || getfile.MimeType == "application/pdf" || getfile.MimeType == "application/vnd.google-apps.drawing" || getfile.MimeType == "application/vnd.google-apps.form")
                                        {
                                            Console.Write("MIME Type update: ...[[[" + getfile.MimeType + "]]]...\n");

                                            string dest1 = Path.Combine(savelocation, fileName);
                                            var stream1 = new System.IO.FileStream(dest1, FileMode.Create, FileAccess.ReadWrite);

                                            // Add a handler which will be notified on progress changes.
                                            // It will notify on each chunk download and when the
                                            // download is completed or failed.
                                            requestfileid.MediaDownloader.ProgressChanged +=
                                                (IDownloadProgress progress) =>
                                                {
                                                    switch (progress.Status)
                                                    {
                                                        case DownloadStatus.Downloading:
                                                            {
                                                                Console.WriteLine(progress.BytesDownloaded);
                                                                break;
                                                            }
                                                        case DownloadStatus.Completed:
                                                            {
                                                                Console.WriteLine("Download complete.");
                                                                break;
                                                            }
                                                        case DownloadStatus.Failed:
                                                            {
                                                                Console.WriteLine("Error: There is nothing I can do with this file\nIs this is a draw or form?");
                                                                break;
                                                            }
                                                    }
                                                };
                                            requestfileid.Download(stream1);
                                            stream1.Close();
                                            stream1.Dispose();
                                        }
                                        else
                                        {
                                            // Any other file type, assume as know what it is (which in our case, will be a txt file)
                                            // apply the mime type and carry on.
                                            Console.Write("MIME Type: ...[[[" + getfile.MimeType + "]]]...\n");

                                            string dest = Path.Combine(savelocation, fileName + ext);
                                            var stream = new System.IO.FileStream(dest, FileMode.Create, FileAccess.ReadWrite);

                                            // Add a handler which will be notified on progress changes.
                                            // It will notify on each chunk download and when the
                                            // download is completed or failed.
                                            request.MediaDownloader.ProgressChanged +=
                                                (IDownloadProgress progress) =>
                                                {
                                                    switch (progress.Status)
                                                    {
                                                        case DownloadStatus.Downloading:
                                                            {
                                                                Console.WriteLine(progress.BytesDownloaded);
                                                                break;
                                                            }
                                                        case DownloadStatus.Completed:
                                                            {
                                                                Console.WriteLine("Download complete.");
                                                                break;
                                                            }
                                                        case DownloadStatus.Failed:
                                                            {
                                                                Console.WriteLine("Error: May be a folder, feature not available yet.");
                                                                break;
                                                            }
                                                    }
                                                };
                                            request.Download(stream);
                                            stream.Close();
                                            stream.Dispose();
                                        }
                                    }
                                }
                                catch (Exception e)
                                {
                                    // Well, we found a file that isn't usable or convertable
                                    // we typically see this with a google form or google draw file, too.
                                    Console.Write("\nError: Bad file, cannot convert. ---> " + e.Message.ToString() + "\n");
                                }
                            }
                        }
                        else
                        {
                            Console.WriteLine("No files found.");
                        }
                        Console.WriteLine("\n\n\t---Backup routine completed!---");
                    }

                }
            }
        }
    }
}
